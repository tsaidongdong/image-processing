# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\學校課程\大四上\影像處理\作業\Hw2\hw2\hw2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2
import numpy as np
import time
import glob

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox_1 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_1.setGeometry(QtCore.QRect(40, 60, 200, 400))
        self.groupBox_1.setObjectName("groupBox_1")
        self.draw_contour_button = QtWidgets.QPushButton(self.groupBox_1)
        self.draw_contour_button.setGeometry(QtCore.QRect(30, 70, 150, 28))
        self.draw_contour_button.setObjectName("draw_contour_button")
        self.draw_contour_button.clicked.connect(self.draw_contour_button_clicked)

        self.count_rings_button = QtWidgets.QPushButton(self.groupBox_1)
        self.count_rings_button.setGeometry(QtCore.QRect(30, 130, 150, 28))
        self.count_rings_button.setObjectName("count_rings_button")

        self.img1_label = QtWidgets.QLabel(self.groupBox_1)
        self.img1_label.setGeometry(QtCore.QRect(20, 190, 171, 31))
        self.img1_label.setObjectName("img1_label")
        self.img2_label = QtWidgets.QLabel(self.groupBox_1)
        self.img2_label.setGeometry(QtCore.QRect(20, 230, 171, 31))
        self.img2_label.setObjectName("img2_label")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(300, 60, 200, 400))
        self.groupBox_2.setObjectName("groupBox_2")
        self.find_corners_button = QtWidgets.QPushButton(self.groupBox_2)
        self.find_corners_button.setGeometry(QtCore.QRect(30, 60, 150, 28))
        self.find_corners_button.setObjectName("find_corners_button")
        self.find_corners_button.clicked.connect(self.find_corners_button_clicked)

        self.find_intrinsic_button = QtWidgets.QPushButton(self.groupBox_2)
        self.find_intrinsic_button.setGeometry(QtCore.QRect(30, 120, 150, 28))
        self.find_intrinsic_button.setObjectName("find_intrinsic_button")
        self.find_intrinsic_button.clicked.connect(self.find_intrinsic_button_clicked)
        
        self.find_distortion_button = QtWidgets.QPushButton(self.groupBox_2)
        self.find_distortion_button.setGeometry(QtCore.QRect(30, 300, 150, 28))
        self.find_distortion_button.setObjectName("find_distortion_button")
        self.find_distortion_button.clicked.connect(self.find_distortion_button_clicked)

        self.show_result_button = QtWidgets.QPushButton(self.groupBox_2)
        self.show_result_button.setGeometry(QtCore.QRect(30, 350, 150, 28))
        self.show_result_button.setObjectName("show_result_button")
        self.show_result_button.clicked.connect(self.show_result_button_clicked)

        self.groupBox_23 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_23.setGeometry(QtCore.QRect(20, 160, 161, 131))
        self.groupBox_23.setObjectName("groupBox_23")
        self.find_extrinsic_button = QtWidgets.QPushButton(self.groupBox_23)
        self.find_extrinsic_button.setGeometry(QtCore.QRect(10, 90, 141, 28))
        self.find_extrinsic_button.setObjectName("find_extrinsic_button")
        self.find_extrinsic_button.clicked.connect(self.find_extrinsic_button_clicked)

        self.lineEdit2 = QtWidgets.QLineEdit(self.groupBox_23)
        self.lineEdit2.setGeometry(QtCore.QRect(90, 40, 61, 31))
        self.lineEdit2.setObjectName("lineEdit2")

        self.select_image_label = QtWidgets.QLabel(self.groupBox_23)
        self.select_image_label.setGeometry(QtCore.QRect(10, 40, 81, 31))
        self.select_image_label.setObjectName("select_image_label")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(550, 60, 200, 181))
        self.groupBox_3.setObjectName("groupBox_3")
        self.show_words_on_board_button = QtWidgets.QPushButton(self.groupBox_3)
        self.show_words_on_board_button.setGeometry(QtCore.QRect(20, 90, 161, 28))
        self.show_words_on_board_button.setObjectName("show_words_on_board_button")
        self.show_word_vertically_button = QtWidgets.QPushButton(self.groupBox_3)
        self.show_word_vertically_button.setGeometry(QtCore.QRect(20, 140, 161, 28))
        self.show_word_vertically_button.setObjectName("show_word_vertically_button")
        self.lineEdit3 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit3.setGeometry(QtCore.QRect(20, 40, 161, 31))
        self.lineEdit3.setObjectName("lineEdit3")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(550, 280, 200, 181))
        self.groupBox_4.setObjectName("groupBox_4")
        self.stereo_display_map_button = QtWidgets.QPushButton(self.groupBox_4)
        self.stereo_display_map_button.setGeometry(QtCore.QRect(20, 50, 161, 28))
        self.stereo_display_map_button.setObjectName("stereo_display_map_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox_1.setTitle(_translate("MainWindow", "1.Find Contour"))
        self.draw_contour_button.setText(_translate("MainWindow", "1.1 Draw Contour"))
        self.count_rings_button.setText(_translate("MainWindow", "1.2 Count Rings"))
        self.img1_label.setText(_translate("MainWindow", "There are _rings in img1.jpg"))
        self.img2_label.setText(_translate("MainWindow", "There are _rings in img2.jpg"))
        self.groupBox_2.setTitle(_translate("MainWindow", "2.Calibration"))
        self.find_corners_button.setText(_translate("MainWindow", "2.1 Find Corners"))
        self.find_intrinsic_button.setText(_translate("MainWindow", "2.2 Find Intrinsic"))
        self.find_distortion_button.setText(_translate("MainWindow", "2.4 Find Distortion"))
        self.show_result_button.setText(_translate("MainWindow", "2.5 Show Result"))
        self.groupBox_23.setTitle(_translate("MainWindow", "2.3 Find Extrinsic"))
        self.find_extrinsic_button.setText(_translate("MainWindow", "2.3 Find Extrinsic"))
        self.select_image_label.setText(_translate("MainWindow", "Select image:"))
        self.groupBox_3.setTitle(_translate("MainWindow", "3.Augmented Reality"))
        self.show_words_on_board_button.setText(_translate("MainWindow", "3.1 Show Words on Board"))
        self.show_word_vertically_button.setText(_translate("MainWindow", "3.2 Show Words Vertically"))
        self.groupBox_4.setTitle(_translate("MainWindow", "4.Stereo Disparity Map"))
        self.stereo_display_map_button.setText(_translate("MainWindow", "4.1 Stereo Disparity Map"))
    #part1
    def draw_contour_button_clicked(self):
        img1=cv2.imread("./Q1_Image/img1.jpg")
        img3=cv2.resize(img1,(550,735))
        img2=cv2.imread("./Q1_Image/img2.jpg")
        # 影象灰度化
        gray = cv2.cvtColor(img3, cv2.COLOR_BGR2GRAY)
        # 3*3核的高斯濾波
        blurred = cv2.GaussianBlur(gray, (3, 3), 0)   
        cv2.imshow("blurred",blurred)
        ret, th1 = cv2.threshold(blurred, 120, 255, cv2.THRESH_BINARY)
        cv2.imshow("Image2", th1)
        # canny邊緣檢測
        canny = cv2.Canny(th1, 20, 150)
        cv2.imshow("canny", canny)
        (counts, hierarchy) = cv2.findContours(canny, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
        print("I count {} coins in this image". format(len(counts)))
        cv2.drawContours(img3, counts, -1, (0, 255, 0), 2)
        cv2.imshow("Image", img3)
        cv2.waitKey(0)
    #part2
    def find_corners_button_clicked(self):
        for i in range(1,16):
            read_place="./Q2_Image/"+str(i)+".bmp"
            img=cv2.imread(read_place)
            img=cv2.resize(img,(512,512))
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            ret,corners = cv2.findChessboardCorners(gray,(11,8),None)
            # 圖上繪製檢測到的角點
            cv2.drawChessboardCorners(img, (11,8), corners, ret)   # 記住，OpenCV的繪製函數一般無返回值
            cv2.imshow("Image", img)
            cv2.waitKey(1000)
        cv2.destroyAllWindows()
        cv2.waitKey(0)
        
    def find_intrinsic_button_clicked(self):
        #閥值
        criteria=(cv2.TERM_CRITERIA_EPS+cv2.TermCriteria_MAX_ITER,30,0.001)
        #世界坐標系中的棋盤規格
        objp=np.zeros((11*8,3),np.float32)
        objp[:,:2]=np.mgrid[0:11,0:8].T.reshape(-1,2)
        #儲存棋盤規格點的世界座標和圖像座標對
        objpoints=[]
        imgpoints=[]#在圖像平面的二維點

        for fname in range(1,16):
            read_place="./Q2_Image/"+str(fname)+".bmp"
            img=cv2.imread(read_place)
            gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            #找到棋盤格繳點
            ret,corners=cv2.findChessboardCorners(gray,(11,8),None)
            #如果找到足夠點對 將其儲存起來
            if ret==True:
                cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
                objpoints.append(objp)
                imgpoints.append(corners)
                
        cv2.destroyAllWindows()
        #標定
        ret,mtx,dist,rvecs,tvecs=cv2.calibrateCamera(objpoints,imgpoints,gray.shape[::-1],None,None)
        print("Intrinsic:")
        print(mtx)
        cv2.destroyAllWindows()
        cv2.waitKey(0)
    def find_extrinsic_button_clicked(self):
        a=int(self.lineEdit2.text())
        #閥值
        criteria=(cv2.TERM_CRITERIA_EPS+cv2.TermCriteria_MAX_ITER,30,0.001)
        #世界坐標系中的棋盤規格
        objp=np.zeros((11*8,3),np.float32)
        objp[:,:2]=np.mgrid[0:11,0:8].T.reshape(-1,2)
        #儲存棋盤規格點的世界座標和圖像座標對
        objpoints=[]
        imgpoints=[]#在圖像平面的二維點

        for fname in range(a,a+1):
            read_place="./Q2_Image/"+str(fname)+".bmp"
            img=cv2.imread(read_place)
            gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            #找到棋盤格繳點
            ret,corners=cv2.findChessboardCorners(gray,(11,8),None)
            #如果找到足夠點對 將其儲存起來
            if ret==True:
                cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
                objpoints.append(objp)
                imgpoints.append(corners)
                
        cv2.destroyAllWindows()
        #標定
        ret,mtx,dist,rvecs,tvecs=cv2.calibrateCamera(objpoints,imgpoints,gray.shape[::-1],None,None)
        
        R = cv2.Rodrigues(rvecs[0])[0]
        t = tvecs[0]
        Rt = np.concatenate([R,t], axis=-1) # [R|t]
        P = np.matmul(mtx,Rt) # A[R|t]
        print("Extrinsic:")
        print(Rt)
        cv2.destroyAllWindows()
        cv2.waitKey(0)

    def find_distortion_button_clicked(self):
        #閥值
        criteria=(cv2.TERM_CRITERIA_EPS+cv2.TermCriteria_MAX_ITER,30,0.001)
        #世界坐標系中的棋盤規格
        objp=np.zeros((11*8,3),np.float32)
        objp[:,:2]=np.mgrid[0:11,0:8].T.reshape(-1,2)
        #儲存棋盤規格點的世界座標和圖像座標對
        objpoints=[]
        imgpoints=[]#在圖像平面的二維點

        for fname in range(1,16):
            read_place="./Q2_Image/"+str(fname)+".bmp"
            img=cv2.imread(read_place)
            gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            #找到棋盤格繳點
            ret,corners=cv2.findChessboardCorners(gray,(11,8),None)
            #如果找到足夠點對 將其儲存起來
            if ret==True:
                cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
                objpoints.append(objp)
                imgpoints.append(corners)
                
        cv2.destroyAllWindows()
        #標定
        ret,mtx,dist,rvecs,tvecs=cv2.calibrateCamera(objpoints,imgpoints,gray.shape[::-1],None,None)
        print("Distortion:")
        print(dist)
        cv2.destroyAllWindows()
        cv2.waitKey(0)

    def show_result_button_clicked(self):
        #閥值
        criteria=(cv2.TERM_CRITERIA_EPS+cv2.TermCriteria_MAX_ITER,30,0.001)
        #世界坐標系中的棋盤規格
        objp=np.zeros((11*8,3),np.float32)
        objp[:,:2]=np.mgrid[0:11,0:8].T.reshape(-1,2)
        #儲存棋盤規格點的世界座標和圖像座標對
        objpoints=[]
        imgpoints=[]#在圖像平面的二維點

        for fname in range(1,16):
            read_place="./Q2_Image/"+str(fname)+".bmp"
            img=cv2.imread(read_place)
            gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            #找到棋盤格繳點
            ret,corners=cv2.findChessboardCorners(gray,(11,8),None)
            #如果找到足夠點對 將其儲存起來
            if ret==True:
                cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
                objpoints.append(objp)
                imgpoints.append(corners)
                
        cv2.destroyAllWindows()
        #標定
        ret,mtx,dist,rvecs,tvecs=cv2.calibrateCamera(objpoints,imgpoints,gray.shape[::-1],None,None)

        for i in range(1,16):
            read_place="./Q2_Image/"+str(i)+".bmp"
            img=cv2.imread(read_place)
            img=cv2.resize(img,(512,512))
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            #去崎變
            height,weight=gray.shape[:2]
            newcameramtx,roi=cv2.getOptimalNewCameraMatrix(mtx,dist,(weight,height),0,(weight,height))#自由比例
            gray2=cv2.undistort(gray,mtx,dist,None,newcameramtx)
            numpy_horizontal = np.hstack((gray, gray2))
            #numpy_horizontal_concat = np.concatenate((gray, gray2), axis=1)
            cv2.imshow('Undistorted', numpy_horizontal)
            cv2.waitKey(1000)
        cv2.destroyAllWindows()
        cv2.waitKey(0)

    #PART3
    
            